Given:
 Consider the UndoViolet and CollabViolet teams. Each of them benefited by having a Command interface to represent commands in Violet such as adding a node, joining nodes by an edge, removing a node, removing an edge, changing the position of a node, or changing a property of a node or edge. In the case of CollabViolet, these commands would be replayed on another machine. That is, a Command would have a method void do() to execute the command. In the case of UndoViolet, there would also be a method void undo() to undo the command. For example, the undo of adding a node is removing the node, and the undo of changing a node property is to set it back to its original value. Place your answer to this question in a file problem2.txt.
 
 a. Explain why this is or is not an example of the Strategy design pattern.

A strategy design pattern is where a program allows its runtime execution to be used interchangeably. Since CollabViolet and UndoViolet would allow different machines to be able to execute the action, this is an example of a strategy design pattern.

b. Sometimes, it is beneficial to combine a sequence of several commands into one. For example, consider what happens when one draws an arrow in a sequence diagram from an activation bar to an implicit parameter node. At the destination, a new activation bar node is inserted. (Try it out in Violet if you are unsure about this phenomenon.) This command is best represented as the sequence of two commands: Insert the activation bar node, and join the two activation bar nodes with a call edge. Of course, the do method of a CommandSequence invokes the do methods of each of the commands in the seqence. The undo method of a CommandSequence invokes the undo methods of each of the commands in the seqence in reverse order. Explain why this is or is not an example of the Composite design pattern.

A composite design pattern is where programs are able to work things uniformly in an iterative manner. Even though the undo method of each command performs its action in reverse order, it is still working uniformly in the same way. It performs the same actions as the do but in a reverse order. It goes back on what the do action does but erases the data.
